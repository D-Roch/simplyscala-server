h1. SIMPLY SCALA SERVER

This project provides a fast & ultra-lightweight http server (with "simpleframework":http://www.simpleframework.org/)
with an API dedicated to define server's routes (request-response), start & stop server.

This works in a Java 6+ environment

The actual project release version is "0.2":http://search.maven.org/#search|ga|1|simplyscala-server

This project is under test. See test code coverage "here":http://simplyscala.github.com/simplyscala-server/

h2. Roadmap

* %{color:green;padding-right:164px}custom server's default response%                  %{color:green;font-weight:bold}OK%
* %{color:green;padding-right:225px}GET request with params%                           %{color:green;font-weight:bold}OK%
* %{color:green;padding-right:155px}use * pattern for path route param%                %{color:green;font-weight:bold}OK%
* %{color:green;padding-right:100px}check if chosen port was not already used%         %{color:green;font-weight:bold}OK%
* %{color:green;padding-right:312px}POST request%                                      %{color:green;font-weight:bold}OK%
* %{color:green;padding-right:285px}cross compilation%                                 %{color:green;font-weight:bold}OK%
* push on maven central repository                                                     OK

* Dynamic ServerResponse                                                               TODO
* %{color:orange;padding-right:323px}PUT request%                                      %{color:orange;font-weight:bold}TODO%
* %{color:orange;padding-right:312px}HEAD request%                                     %{color:orange;font-weight:bold}TODO%
* %{color:orange;padding-right:330px}Java API%                                         %{color:orange;font-weight:bold}TODO%
* build in scala 2.10                                                                  TODO

h2. Installation

h3. Git repo

simplyscala-server is a SBT project.
It use 0.12 sbt version.

h3. Maven dependency

<pre><code>
    <dependency>
        <groupId>com.github.simplyscala</groupId>
        <artifactId>simplyscala-server_2.9.2</artifactId>
        <version>0.2</version>
    </dependency>
</code></pre>

h3. SBT dependency

<pre><code>
    libraryDependencies += "com.github.simplyscala" %% "simplyscala-server" % "0.2"
</code></pre>

    Only the following Scala versions 2.9.0, 2.9.1 & 2.9.2 are currently supported.

h4. Play! specific dependency management

In your play! project Build file :

<pre><code>
    object ApplicationBuild extends Build {

        val appDependencies = Seq (
            "com.github.simplyscala" %% "simplyscala-server" % "0.2"
        )
    }
</code></pre>

h3. Simple JAR file

"0.2 jar version":http://search.maven.org/remotecontent?filepath=com/github/simplyscala/simplyscala-server_2.9.2/0.2/simplyscala-server_2.9.2-0.2.jar

h2. Usage

In order to use SimplyScala server API, import as follows:

<code>import fr.simply._</code>

h3. Basic Usage

<pre>
<code>
    val server = new StubServer(8080).start
    server.stop
</code>
</pre>

By default, with no routes defined, SimplyScala server returns a 404 text/plain response with "error" in body

h3. Server's custom default response

You can define your own server's default response like this :

<code>
    val server = new StubServer(8080).defaultResponse(ContentType("text/plain"), "value return in body", 400).start
</code>

h3. Build GET request routes with param

<pre>
<code>
    val route = GET (
        path = "/test",
        params = Map("param1" -> "toto"),
        response = ServerResponse(ContentType("text/plain"), "yo", 200)
    )

    val server = new StubServer(8080, route).start
</code>
</pre>

when you request <code>http://localhost:8080/test?param1=toto</code>, the server returns with an http code 200 and a "text/plain"-typed body containing "yo".

h3. Build POST request route with param

<pre>
<code>
    val route = POST (
        path = "/test",
        params = Map("param1" -> "toto"),
        response = ServerResponse(ContentType("text/plain"), "yo", 200)
    )

    val server = new StubServer(8080, route).start
</code>
</pre>

h3. What to do when the configured port is already used ?

Before creating the server instance, SimplyScala checks if the port you defined is not already in use.
If it is the case, SimplyScala will try the next value (+1) port to start the server.
You can retrieve the effective port like this:

<pre>
<code>
    val server = new StubServer(8080).start
    server.portInUse    // perhaps 8081
</code>
</pre>

h3. ContentType util

with fr.simply.util._ import you can use some utilities to declare server's content type

<pre>
<code>
    val route = GET (
        path = "/test",
        params = Map("param1" -> "toto"),
        response = ServerResponse(Text_Plain), "yo", 200)
    )

    val server = new StubServer(8080, route).start
</code>
</pre>

if we don't have the needed content type util you can use <code>ContentType("your content type")</code>

h2. Uses in test context

simplyscala-server is particularly useful in unit test context.
You can use it like that with "ScalaTest":http://www.scalatest.org/ :

<pre>
<code>
    class StubServerTest extends FunSuite with ShouldMatchers with BeforeAndAfter {

        var server: StubServer = _

        after { if (server != null) server.stop }

        test("a test which needed simplyscala-server") {
            val route = GET (
                path = "/test",
                params = Map("param" -> "toto"),
                response = ServerResponse(Text_Plain), "yo", 200)
            )

            server = new StubServer(8080, route).start

            someHttpRequest("http://localhost:%s/test?param=toto".format(server.portInUse))
        }
    }
</code>
</pre>

h5. footpage

This file is written with .textile extension
* http://en.wikipedia.org/wiki/Textile_%28markup_language%29
* http://textile.sitemonks.com
* http://redcloth.org/hobix.com/textile/

"Maven Repository Usage Guide":https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide
"Sonatype project JIRA Page":https://issues.sonatype.org/browse/OSSRH-5163