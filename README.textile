h1. SimplyScala

This project provide a fast & tiny http server (http://www.simpleframework.org/)
with useful API to define server's routes (request-response), start & stop server.

h2. RoadMap

* custom server's default response                  OK
* GET request with params                           OK
* use * pattern for path route param                OK
* check if chosen port was not already used         OK
* POST request                                      OK
* PUT  request                                      TODO
* HEAD request                                      TODO

h2. Installation

h3. Git repo

SimplyScala is a SBT project.
It use 0.12 sbt version

h3. Maven dependency

<pre><code>
    <repositories>
        <repository>
    	    <id>ugo-repo</id>
    	    <url>https://github.com/ubourdon/dependenciesRepository/raw/master/release</url>
    	</repository>
    </repositories>

    <dependency>
        <groupId>fr.simply</groupId>
        <artifactId>simplyScala_2.9.2</artifactId>
        <version>0.1</version>
    </dependency>
</code></pre>

h3. SBT dependency

<pre><code>
    resolvers += "ugo repository" at "https://github.com/ubourdon/dependenciesRepository/raw/master/release"

    "fr.simply" %% "simplyScala_2.9.2" % "0.1"
</code></pre>

h3. Simple JAR file

h2. Usage

h3. Basic Usage

<pre>
<code>
    val server = new StubServer(8080).start
    server.stop
</code>
</pre>

By default, with no routes defined, SimplyScala server return a 404 text/plain response with "error" in body

h3. Server's custom default response

You can defined your own server's default response like this :

<code>
    val server = new StubServer(8080).defaultResponse("text/plain", "value return in body", 400).start
</code>

h3. Build GET request route with param

<pre>
<code>
    val route = GET (
        path = "/test",
        params = Map("param1" -> "toto"),
        response = ServerResponse("text/plain", "yo", 200)
    )

    val server = new StubServer(8080, route).start
</code>
</pre>

when you request <code>http://localhost:8080/test?param1=toto</code>, server return http code 200, with text/plain body containing "yo" response

h3. Build POST request route with param

<pre>
<code>
    val route = POST (
        path = "/test",
        params = Map("param1" -> "toto"),
        response = ServerResponse("text/plain", "yo", 200)
    )

    val server = new StubServer(8080, route).start
</code>
</pre>

h3. What to do when port chosen is already used

Before create the server's instance, SimplyScala check if the port you defined is not already in use.
If it is the case, SimplyScala try the next value (+1) port to start the server.
You can retrieve the effectiveness port in use like this :

<pre>
<code>
    val server = new StubServer(8080).start
    server.portInUse    // perhaps 8081
</code>
</pre>

h2. Uses in test context